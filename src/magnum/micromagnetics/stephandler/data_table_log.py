from .log_stephandler import LogStepHandler

class DataTableLog(LogStepHandler):
  """
  This step handler produces a log in the form of a text file in the
  OOMMF .odt file format.  By default, the simulation time, the step size,
  the averaged magnetizations and the wall time is included in the log.
  """
  def __init__(self, path, title = "(no title)"):
    import os.path
    path = os.path.normpath(path)

    # make sure the target directory (if given in path) exists, otherwise 'open' will fail.
    d = os.path.dirname(path)
    if len(d) > 0 and not os.path.exists(d): os.makedirs(d)    

    self.file = open(path, "w+")
    super(DataTableLog, self).__init__(self.file)
    self.addTimeColumn()
    self.addStepSizeColumn()
    self.addAverageMagColumn()
    self.addWallTimeColumn()
    self.__title = title

  def done(self):
    LogStepHandler.done(self)
    self.file.close()

  def writeHeader(self):

    def pad(txt, width): return txt + " " * (width - len(txt))

    num_columns = 0
    col_spec, unit_spec = "", ""
    for mc in self.columns:
      for col in mc.columns:
        col_spec  += pad("{" + col.desc + "}", 22) + "    "
        unit_spec += pad("{" + col.unit + "}", 22) + "    "
        num_columns += 1

    self.file.write("# ODT 1.0\n")
    self.file.write("# Table Start\n")
    self.file.write("# Title: %s\n" % self.__title)
    self.file.write("#\n")
    self.file.write("## Generated by magnum.DataTableStepHandler.\n")
    self.file.write("## Number of columns: %s\n" % num_columns)
    self.file.write("#\n")
    self.file.write("# Columns:   " + col_spec + "\n")
    self.file.write("# Units:     " + unit_spec + "\n")

  def writeAppendix(self):
    self.file.write("# Table End\n")

  def generateRow(self, state): 
    row = ""
    for mc in self.columns:
      values = mc.func(state)
      if type(values) != tuple: values = (values,)
      for n, col in enumerate(mc.columns):
        row += (col.fmt % values[n]) + "\t"
    return row
